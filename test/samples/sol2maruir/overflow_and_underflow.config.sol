pragma solidity 0.4.24;

contract OverflowsAndUnderflows {
    function testSignedInt8() public {
        int8 a;
        int8 b;
        int8 c;
        a = -128;
        c = -a;
        assert(c == (-128));
        a = 127;
        c = -a;
        assert(c == (-127));
        a = -128;
        b = -128;
        c = (-a) + (-b);
        assert(c == 0);
        a = -128;
        b = -127;
        c = a + b;
        assert(c == 1);
        a = -128;
        b = -1;
        c = a + b;
        assert(c == 127);
        a = 127;
        b = 1;
        c = a + b;
        assert(c == (-128));
        a = -128;
        b = 127;
        c = a - b;
        assert(c == 1);
        a = 127;
        b = -128;
        c = a - b;
        assert(c == (-1));
        a = 127;
        b = 15;
        c = a + b;
        assert(c == (-114));
        a = -128;
        b = -15;
        c = a + b;
        assert(c == 113);
    }

    function testSignedInt256() public {
        int256 a;
        int256 b;
        int256 c;
        a = -57896044618658097711785492504343953926634992332820282019728792003956564819968;
        c = -a;
        assert(c == (-57896044618658097711785492504343953926634992332820282019728792003956564819968));
        a = 57896044618658097711785492504343953926634992332820282019728792003956564819967;
        c = -a;
        assert(c == (-57896044618658097711785492504343953926634992332820282019728792003956564819967));
        a = -57896044618658097711785492504343953926634992332820282019728792003956564819968;
        b = -57896044618658097711785492504343953926634992332820282019728792003956564819968;
        c = (-a) + (-b);
        assert(c == 0);
        a = -57896044618658097711785492504343953926634992332820282019728792003956564819968;
        b = -57896044618658097711785492504343953926634992332820282019728792003956564819967;
        c = a + b;
        assert(c == 1);
        a = -57896044618658097711785492504343953926634992332820282019728792003956564819968;
        b = -1;
        c = a + b;
        assert(c == 57896044618658097711785492504343953926634992332820282019728792003956564819967);
        a = 57896044618658097711785492504343953926634992332820282019728792003956564819967;
        b = 1;
        c = a + b;
        assert(c == (-57896044618658097711785492504343953926634992332820282019728792003956564819968));
        a = -57896044618658097711785492504343953926634992332820282019728792003956564819968;
        b = 57896044618658097711785492504343953926634992332820282019728792003956564819967;
        c = a - b;
        assert(c == 1);
        a = 57896044618658097711785492504343953926634992332820282019728792003956564819967;
        b = -57896044618658097711785492504343953926634992332820282019728792003956564819968;
        c = a - b;
        assert(c == (-1));
        a = 57896044618658097711785492504343953926634992332820282019728792003956564819967;
        b = 15;
        c = a + b;
        assert(c == (-57896044618658097711785492504343953926634992332820282019728792003956564819954));
        a = -57896044618658097711785492504343953926634992332820282019728792003956564819968;
        b = -15;
        c = a + b;
        assert(c == 57896044618658097711785492504343953926634992332820282019728792003956564819953);
    }

    function testUnsignedInt8() public {
        uint8 a;
        uint8 b;
        uint8 c;
        a = 0;
        b = 1;
        c = a - b;
        assert(c == 255);
        a = 0;
        b = 10;
        c = a - b;
        assert(c == 246);
        a = 255;
        b = 1;
        c = a + b;
        assert(c == 0);
        a = 255;
        b = 10;
        c = a + b;
        assert(c == 9);
        a = 255;
        b = 255;
        c = a + b;
        assert(c == 254);
        a = 128;
        b = 255;
        c = a - b;
        assert(c == 129);
        a = 0;
        b = 128;
        c = a - b;
        assert(c == 128);
    }

    function testUnsignedInt256() public {
        uint256 a;
        uint256 b;
        uint256 c;
        a = 0;
        b = 1;
        c = a - b;
        assert(c == 115792089237316195423570985008687907853269984665640564039457584007913129639935);
        a = 0;
        b = 10;
        c = a - b;
        assert(c == 115792089237316195423570985008687907853269984665640564039457584007913129639926);
        a = 115792089237316195423570985008687907853269984665640564039457584007913129639935;
        b = 1;
        c = a + b;
        assert(c == 0);
        a = 115792089237316195423570985008687907853269984665640564039457584007913129639935;
        b = 10;
        c = a + b;
        assert(c == 9);
        a = 115792089237316195423570985008687907853269984665640564039457584007913129639935;
        b = 115792089237316195423570985008687907853269984665640564039457584007913129639935;
        c = a + b;
        assert(c == 115792089237316195423570985008687907853269984665640564039457584007913129639934);
        a = 57896044618658097711785492504343953926634992332820282019728792003956564819968;
        b = 115792089237316195423570985008687907853269984665640564039457584007913129639935;
        c = a - b;
        assert(c == 57896044618658097711785492504343953926634992332820282019728792003956564819969);
        a = 0;
        b = 57896044618658097711785492504343953926634992332820282019728792003956564819968;
        c = a - b;
        assert(c == 57896044618658097711785492504343953926634992332820282019728792003956564819968);
    }

    function docCases() public {
        int256 a;
        int256 b;
        int256 c;
        a = ~0;
        b = -1;
        assert(a == b);
        uint256 x = 0;
        uint256 y = 1;
        uint256 z = x - y;
        assert(z == 115792089237316195423570985008687907853269984665640564039457584007913129639935);
        a = -5;
        b = 2;
        c = a / b;
        assert(c == (-2));
        a = 5;
        b = 2;
        c = a % b;
        assert(c == 1);
        a = 5;
        b = -2;
        c = a % b;
        assert(c == 1);
        a = -5;
        b = 2;
        c = a % b;
        assert(c == (-1));
        a = -5;
        b = -2;
        c = a % b;
        assert(c == (-1));
        x = 0;
        y = 0;
        z = x ** y;
        assert(z == 1);
        a = (-2) ** 255;
        assert((-a) == a);
    }
}

contract __IRTest__ {
    function main() public {
        OverflowsAndUnderflows __this__ = new OverflowsAndUnderflows();
        __testCase955__(__this__);
        __testCase969__(__this__);
        __testCase983__(__this__);
        __testCase997__(__this__);
        __testCase1011__(__this__);
    }

    function __testCase955__(OverflowsAndUnderflows __this__) internal {
        __this__.testSignedInt8();
    }

    function __testCase969__(OverflowsAndUnderflows __this__) internal {
        __this__.testSignedInt256();
    }

    function __testCase983__(OverflowsAndUnderflows __this__) internal {
        __this__.testUnsignedInt8();
    }

    function __testCase997__(OverflowsAndUnderflows __this__) internal {
        __this__.testUnsignedInt256();
    }

    function __testCase1011__(OverflowsAndUnderflows __this__) internal {
        __this__.docCases();
    }
}
